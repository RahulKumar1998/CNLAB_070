//lab1

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/ipv4-global-routing-helper.h"
#include "ns3/csma-module.h"
#include"ns3/flow-monitor-module.h"
using namespace ns3;
NS_LOG_COMPONENT_DEFINE("Second script example");
int main(int argc, char *argv[])
{
LogComponentEnable("UdpEchoClientApplication",LOG_LEVEL_INFO);
LogComponentEnable("UdpEchoServerApplication",LOG_LEVEL_INFO);
NodeContainer p2pNodes;
p2pNodes.Create(4);
PointToPointHelper pointToPoint;
pointToPoint.SetDeviceAttribute("DataRate",StringValue("5Mbps"));
pointToPoint.SetChannelAttribute("Delay",StringValue("2ms"));
PointToPointHelper pointToPoint1;
pointToPoint1.SetDeviceAttribute("DataRate",StringValue("7Mbps"));
pointToPoint1.SetChannelAttribute("Delay",StringValue("1ms"));PointToPointHelper pointToPoint2;
pointToPoint2.SetDeviceAttribute("DataRate",StringValue("7Mbps"));
pointToPoint2.SetChannelAttribute("Delay",StringValue("1ms"));
NetDeviceContainer p2pDevices;
p2pDevices=pointToPoint.Install(p2pNodes.Get(0),p2pNodes.Get(1));
std::cout<<"installed no and n1"<<std::endl;
NetDeviceContainer p2pDevices1;
p2pDevices1=pointToPoint1.Install(p2pNodes.Get(1),p2pNodes.Get(2));
std::cout<<"installed n1 and n2"<<std::endl;
NetDeviceContainer p2pDevices2;
p2pDevices2=pointToPoint2.Install(p2pNodes.Get(2),p2pNodes.Get(3));
std::cout<<"installed n2 and n3"<<std::endl;
InternetStackHelper stack;
stack.Install(p2pNodes);
Ipv4AddressHelper address;
address.SetBase("10.1.1.0", "255.255.255.0");
Ipv4InterfaceContainer p2pInterfaces;
p2pInterfaces=address.Assign(p2pDevices);
Ipv4AddressHelper address1;
address1.SetBase("20.1.2.0", "255.255.255.0");
Ipv4InterfaceContainer p2pInterfaces1;
p2pInterfaces1=address1.Assign(p2pDevices1);
address1.SetBase("20.1.3.0", "255.255.255.0");
Ipv4InterfaceContainer p2pInterfaces2;
p2pInterfaces2=address1.Assign(p2pDevices2);
UdpEchoServerHelper echoServer(9);
ApplicationContainer serverApps = echoServer.Install(p2pNodes.Get(1));
serverApps.Start(Seconds(1.0));serverApps.Stop(Seconds(10.0));
UdpEchoClientHelper echoClient(p2pInterfaces.GetAddress(1),9);
echoClient.SetAttribute("MaxPackets", UintegerValue(1));
echoClient.SetAttribute("Interval",TimeValue(Seconds(1.0)));
echoClient.SetAttribute("PacketSize", UintegerValue(1024));
ApplicationContainer clientApps=echoClient.Install(p2pNodes.Get(0));
clientApps.Start(Seconds(2.0));
clientApps.Stop(Seconds(10.0));
UdpEchoServerHelper echoServer1(10);
ApplicationContainer serverApps1 = echoServer1.Install(p2pNodes.Get(1));
serverApps1.Start(Seconds(1.0));
serverApps1.Stop(Seconds(10.0));
UdpEchoClientHelper echoClient1(p2pInterfaces1.GetAddress(0),10);
echoClient1.SetAttribute("MaxPackets", UintegerValue(1));
echoClient1.SetAttribute("Interval",TimeValue(Seconds(1.0)));
echoClient1.SetAttribute("PacketSize", UintegerValue(1024));
ApplicationContainer clientApps1=echoClient1.Install(p2pNodes.Get(2));
clientApps1.Start(Seconds(3.0));
clientApps1.Stop(Seconds(10.0));
UdpEchoServerHelper echoServer2(11);
ApplicationContainer serverApps2 = echoServer2.Install(p2pNodes.Get(1));
serverApps2.Start(Seconds(1.0));
serverApps2.Stop(Seconds(10.0));
UdpEchoClientHelper echoClient2(p2pInterfaces1.GetAddress(0),11);
echoClient2.SetAttribute("MaxPackets", UintegerValue(1));
echoClient2.SetAttribute("Interval",TimeValue(Seconds(1.0)));
echoClient2.SetAttribute("PacketSize", UintegerValue(1024));
ApplicationContainer clientApps2=echoClient2.Install(p2pNodes.Get(3));
clientApps2.Start(Seconds(4.0));
clientApps2.Stop(Seconds(10.0));
FlowMonitorHelper flowmon;Ptr<FlowMonitor>monitor=flowmon.InstallAll();
Ipv4GlobalRoutingHelper::PopulateRoutingTables();
NS_LOG_INFO("Run Simulation");
Simulator::Stop(Seconds(11.0));
Simulator::Run ();
monitor->CheckForLostPackets();
Ptr<Ipv4FlowClassifier>classifier=DynamicCast<Ipv4FlowClassifier>(flowmon.GetClassifier());
std::map<FlowId,FlowMonitor::FlowStats>stats=monitor->GetFlowStats();
for(std::map<FlowId,FlowMonitor::FlowStats>::const_iterator i=stats.begin();i!=stats.end();++i)
{
Ipv4FlowClassifier::FiveTuple t=classifier->FindFlow(i->first);
std::cout<<"Flow:"<<i->first<<"\nSourceAddress="<<t.sourceAddress<<"DestinationAddress="<<t.destinationAddress<<" SourcePort:"<<t.sourcePort;
std::cout<<"Destination Port:"<<t.destinationPort<<"\n";
std::cout<<"Flow"<<i->first<<"("<<t.sourceAddress<<"->"<<t.destinationAddress<<")\n";
std::cout<<"TxBytes:"<<i->second.txBytes<<"\n";
std::cout<<"RxBytes:"<<i->second.rxBytes<<"\n";
std::cout<<"TxPackets:"<<i->second.txPackets<<"\n";
std::cout<<"RxPackets:"<<i->second.rxPackets<<"\n";
std::cout<<"Total time taken"<<i->second.timeLastRxPacket.GetSeconds()-i->second.timeFirstTxPacket.GetSeconds()<<std::endl;
std::cout<<"Throughput:";
std::cout<<i->second.rxBytes*8.0/(i->second.timeLastRxPacket.GetSeconds()-i->second.timeFirstTxPacket.GetSeconds())/1000/1000<<"mbps\n";
}
Simulator::Destroy();
NS_LOG_INFO("Done");
return 0;
}


//lab2
#include"ns3/core-module.h"
#include"ns3/network-module.h"
#include"ns3/csma-module.h"
#include"ns3/internet-module.h"
#include"ns3/point-to-point-module.h"
#include"ns3/applications-module.h"
#include"ns3/ipv4-global-routing-helper.h"
#include"ns3/netanim-module.h"
#include"ns3/mobility-module.h"
#include"ns3/animation-interface.h"
using namespace ns3;
NS_LOG_COMPONENT_DEFINE("Second script example");
int main(int argc, char *argv[])
{
uint32_t nCsma=2;
LogComponentEnable("UdpEchoClientApplication",LOG_LEVEL_INFO);
LogComponentEnable("UdpEchoServerApplication",LOG_LEVEL_INFO);
NodeContainer p2pNodes;p2pNodes.Create(3);
NodeContainer p2pNodes1;
p2pNodes1.Create(2);
NodeContainer csmaNodes;
csmaNodes.Add(p2pNodes.Get(2));
csmaNodes.Create(nCsma);
csmaNodes.Add(p2pNodes1.Get(0));
PointToPointHelper pointToPoint;
pointToPoint.SetDeviceAttribute("DataRate",StringValue("5Mbps"));
pointToPoint.SetChannelAttribute("Delay",StringValue("2ms"));
PointToPointHelper pointToPoint1;
pointToPoint1.SetDeviceAttribute("DataRate",StringValue("5Mbps"));
pointToPoint1.SetChannelAttribute("Delay",StringValue("2ms"));
PointToPointHelper pointToPoint2;
pointToPoint2.SetDeviceAttribute("DataRate",StringValue("5Mbps"));
pointToPoint2.SetChannelAttribute("Delay",StringValue("2ms"));
PointToPointHelper pointToPoint3;
pointToPoint3.SetDeviceAttribute("DataRate",StringValue("5Mbps"));
pointToPoint3.SetChannelAttribute("Delay",StringValue("2ms"));
CsmaHelper csma;
csma.SetChannelAttribute("DataRate",StringValue("10Mbps"));
csma.SetChannelAttribute("Delay",TimeValue(NanoSeconds(6560)));
NetDeviceContainer p2pDevices;
p2pDevices=pointToPoint.Install(p2pNodes.Get(0),p2pNodes.Get(1));std::cout<<"installed no and n1"<<std::endl;
NetDeviceContainer p2pDevices1;
p2pDevices1=pointToPoint1.Install(p2pNodes.Get(1),p2pNodes.Get(2));
std::cout<<"installed n1 and n2"<<std::endl;
NetDeviceContainer p2pDevices2;
p2pDevices2=pointToPoint2.Install(p2pNodes1.Get(0),p2pNodes1.Get(1));
std::cout<<"installed n4 and n5"<<std::endl;
NetDeviceContainer csmaDevices;
csmaDevices=csma.Install(csmaNodes);
InternetStackHelper stack;
stack.Install(p2pNodes);
stack.Install(csmaNodes.Get(1));
stack.Install(csmaNodes.Get(2));
stack.Install(p2pNodes1);
Ipv4AddressHelper address;
address.SetBase("10.1.1.0", "255.255.255.0");
Ipv4InterfaceContainer p2pInterfaces;
p2pInterfaces=address.Assign(p2pDevices);
address.SetBase("10.1.2.0", "255.255.255.0");
Ipv4InterfaceContainer p2pInterfaces1;
p2pInterfaces1=address.Assign(p2pDevices1);
Ipv4AddressHelper address1;
address1.SetBase("30.1.2.0", "255.255.255.0");
Ipv4InterfaceContainer p2pInterfaces2;
p2pInterfaces2=address1.Assign(p2pDevices2);
Ipv4AddressHelper address3;
address3.SetBase("20.1.2.0", "255.255.255.0");
Ipv4InterfaceContainer csmaInterfaces;
csmaInterfaces=address3.Assign(csmaDevices);
UdpEchoServerHelper echoServer(9);ApplicationContainer serverApps = echoServer.Install(p2pNodes1.Get(1));
serverApps.Start(Seconds(1.0));
serverApps.Stop(Seconds(10.0));
UdpEchoClientHelper echoClient(p2pInterfaces2.GetAddress(1),9);
echoClient.SetAttribute("MaxPackets", UintegerValue(1));
echoClient.SetAttribute("Interval",TimeValue(Seconds(1.0)));
echoClient.SetAttribute("PacketSize", UintegerValue(1024));
ApplicationContainer clientApps=echoClient.Install(p2pNodes.Get(0));
clientApps.Start(Seconds(2.0));
clientApps.Stop(Seconds(10.0));
Ipv4GlobalRoutingHelper::PopulateRoutingTables();
pointToPoint.EnablePcapAll ("second");
csma.EnablePcap ("second", csmaDevices.Get (1), true);
AnimationInterface anim("newAnim.xml");
anim.SetConstantPosition(p2pNodes.Get(0),5,5);
anim.SetConstantPosition(csmaNodes.Get(0),10,10);
anim.SetConstantPosition(csmaNodes.Get(1),15,15);
anim.SetConstantPosition(csmaNodes.Get(2),20,20);
anim.SetConstantPosition(csmaNodes.Get(3),25,25);
anim.SetConstantPosition(p2pNodes1.Get(1),30,30);
anim.EnablePacketMetadata(true);
Simulator::Run();
Simulator::Destroy();
return 0;
}

//lab3

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/ipv4-global-routing-helper.h"
#include "ns3/csma-module.h"
#include"ns3/flow-monitor-module.h"
using namespace ns3;
NS_LOG_COMPONENT_DEFINE("Second script example");
int main(int argc, char *argv[])
{
uint32_t nCsma=3;
LogComponentEnable("UdpEchoClientApplication",LOG_LEVEL_INFO);
LogComponentEnable("UdpEchoServerApplication",LOG_LEVEL_INFO);NodeContainer p2pNodes;
p2pNodes.Create(2);
NodeContainer csmaNodes;
csmaNodes.Add(p2pNodes.Get(1));
csmaNodes.Create(nCsma);
PointToPointHelper pointToPoint;
pointToPoint.SetDeviceAttribute("DataRate",StringValue("5Mbps"));
pointToPoint.SetChannelAttribute("Delay",StringValue("2ms"));
CsmaHelper csma;
csma.SetChannelAttribute("DataRate",StringValue("10Mbps"));
csma.SetChannelAttribute("Delay",TimeValue(NanoSeconds(6560)));
NetDeviceContainer p2pDevices;
p2pDevices=pointToPoint.Install(p2pNodes.Get(0),p2pNodes.Get(1));
std::cout<<"installed no and n1"<<std::endl;
NetDeviceContainer csmaDevices;
csmaDevices=csma.Install(csmaNodes);
InternetStackHelper stack;
stack.Install(p2pNodes);
stack.Install(csmaNodes.Get(1));
stack.Install(csmaNodes.Get(2));
stack.Install(csmaNodes.Get(3));Ipv4AddressHelper address;
address.SetBase("10.1.1.0", "255.255.255.0");
Ipv4InterfaceContainer p2pInterfaces;
p2pInterfaces=address.Assign(p2pDevices);
Ipv4AddressHelper address3;
address3.SetBase("20.1.2.0", "255.255.255.0");
Ipv4InterfaceContainer csmaInterfaces;
csmaInterfaces=address3.Assign(csmaDevices);
UdpEchoServerHelper echoServer(9);
ApplicationContainer serverApps = echoServer.Install(csmaNodes.Get(2));
serverApps.Start(Seconds(1.0));
serverApps.Stop(Seconds(10.0));
UdpEchoClientHelper echoClient(csmaInterfaces.GetAddress(2),9);
echoClient.SetAttribute("MaxPackets", UintegerValue(1));
echoClient.SetAttribute("Interval",TimeValue(Seconds(1.0)));
echoClient.SetAttribute("PacketSize", UintegerValue(1024));
ApplicationContainer clientApps=echoClient.Install(p2pNodes.Get(0));
clientApps.Start(Seconds(2.0));
clientApps.Stop(Seconds(10.0));
Ipv4GlobalRoutingHelper::PopulateRoutingTables();
FlowMonitorHelper flowmon;
Ptr<FlowMonitor>monitor=flowmon.InstallAll();NS_LOG_INFO("Run Simulation");
Simulator::Stop(Seconds(11.0));
Simulator::Run ();
monitor->CheckForLostPackets();
Ptr<Ipv4FlowClassifier>classifier=DynamicCast<Ipv4FlowClassifier>(flowmon.GetClassifier());
std::map<FlowId,FlowMonitor::FlowStats>stats=monitor->GetFlowStats();
for(std::map<FlowId,FlowMonitor::FlowStats>::const_iterator i=stats.begin();i!=stats.end();++i)
{
Ipv4FlowClassifier::FiveTuple t=classifier->FindFlow(i->first);
std::cout<<"Flow:"<<i->first<<"\nSourceAdd="<<t.sourceAddress<<"DestinationAdd="<<t.destinationAddress<<" SourcePort:"<<t.sourcePort;
std::cout<<"Destination Port:"<<t.destinationPort<<"\n";
std::cout<<"Flow"<<i->first<<"("<<t.sourceAddress<<"->"<<t.destinationAddress<<")\n";
std::cout<<"TxBytes:"<<i->second.txBytes<<"\n";
std::cout<<"RxBytes:"<<i->second.rxBytes<<"\n";
std::cout<<"TxPackets:"<<i->second.txPackets<<"\n";
std::cout<<"RxPackets:"<<i->second.rxPackets<<"\n";
std::cout<<"Total time taken for transmission"<<i->second.timeLastRxPacket.GetSeconds()-i->second.timeFirstTxPacket.GetSeconds()<<std::endl;
std::cout<<"Throughput:";
std::cout<<i->second.rxBytes*8.0/(i->second.timeLastRxPacket.GetSeconds()-i->second.timeFirstTxPacket.GetSeconds())/1000/1000<<"mbps\n";
}
Simulator::Destroy();
NS_LOG_INFO("Done");
return 0;
}

//lab4


#include"ns3/core-module.h"
#include"ns3/network-module.h"
#include"ns3/csma-module.h"
#include"ns3/internet-module.h"
#include"ns3/point-to-point-module.h"
#include"ns3/applications-module.h"
#include"ns3/ipv4-global-routing-helper.h"
#include"ns3/netanim-module.h"
#include"ns3/mobility-module.h"
#include"ns3/animation-interface.h"
using namespace ns3;
NS_LOG_COMPONENT_DEFINE("Second script example");
int main(int argc, char *argv[])
{
LogComponentEnable("UdpEchoClientApplication",LOG_LEVEL_INFO);
LogComponentEnable("UdpEchoServerApplication",LOG_LEVEL_INFO);
NodeContainer nodes;
nodes.Create(4);
PointToPointHelper pointToPoint;
pointToPoint.SetDeviceAttribute("DataRate",StringValue("5Mbps"));pointToPoint.SetChannelAttribute("Delay",StringValue("2ms"));
PointToPointHelper pointToPoint1;
pointToPoint1.SetDeviceAttribute("DataRate",StringValue("5Mbps"));
pointToPoint1.SetChannelAttribute("Delay",StringValue("2ms"));
PointToPointHelper pointToPoint2;
pointToPoint2.SetDeviceAttribute("DataRate",StringValue("7Mbps"));
pointToPoint2.SetChannelAttribute("Delay",StringValue("1ms"));
NetDeviceContainer devices,devices1,devices2;
devices = pointToPoint.Install (nodes.Get(0),nodes.Get(1));
devices1 = pointToPoint1.Install (nodes.Get(1),nodes.Get(2));
devices2 = pointToPoint2.Install (nodes.Get(2),nodes.Get(3));
InternetStackHelper stack;
stack.Install (nodes);
Ipv4AddressHelper address,address1,address2;
address.SetBase ("10.1.1.0", "255.255.255.0");
address1.SetBase ("10.1.2.0", "255.255.255.0");
address2.SetBase ("10.1.3.0", "255.255.255.0");
Ipv4InterfaceContainer interfaces = address.Assign (devices);
Ipv4InterfaceContainer interfaces1 = address1.Assign (devices1);
Ipv4InterfaceContainer interfaces2 = address2.Assign (devices2);
UdpEchoServerHelper echoServer (9);
UdpEchoServerHelper echoServer1 (10);
UdpEchoServerHelper echoServer2 (11);
ApplicationContainer serverApps = echoServer.Install (nodes.Get (3));
serverApps.Start (Seconds (1.0));
serverApps.Stop (Seconds (10.0));
ApplicationContainer serverApps1 = echoServer1.Install (nodes.Get (3));
serverApps.Start (Seconds (1.0));
serverApps.Stop (Seconds (10.0));
ApplicationContainer serverApps2 = echoServer2.Install (nodes.Get (3));
serverApps.Start (Seconds (1.0));serverApps.Stop (Seconds (10.0));
UdpEchoClientHelper echoClient (interfaces.GetAddress (1), 9);
echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
echoClient.SetAttribute ("PacketSize", UintegerValue (1024));
UdpEchoClientHelper echoClient1 (interfaces1.GetAddress (1), 10);
echoClient1.SetAttribute ("MaxPackets", UintegerValue (1));
echoClient1.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
echoClient1.SetAttribute ("PacketSize", UintegerValue (1024));
UdpEchoClientHelper echoClient2 (interfaces2.GetAddress (1), 11);
echoClient2.SetAttribute ("MaxPackets", UintegerValue (1));
echoClient2.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
echoClient2.SetAttribute ("PacketSize", UintegerValue (1024));
ApplicationContainer clientApps = echoClient.Install (nodes.Get (0));
clientApps.Start (Seconds (2.0));
clientApps.Stop (Seconds (10.0));
ApplicationContainer clientApps1 = echoClient1.Install (nodes.Get (1));
clientApps1.Start (Seconds (2.0));
clientApps1.Stop (Seconds (10.0));
ApplicationContainer clientApps2 = echoClient2.Install (nodes.Get (2));
clientApps2.Start (Seconds (2.0));
clientApps2.Stop (Seconds (10.0));
Ipv4GlobalRoutingHelper::PopulateRoutingTables();
AnimationInterface anim("newAnim.xml");
anim.SetConstantPosition(nodes.Get(0),5,5);
anim.SetConstantPosition(nodes.Get(1),10,10);
anim.SetConstantPosition(nodes.Get(2),15,15);
anim.SetConstantPosition(nodes.Get(3),20,20);
anim.EnablePacketMetadata(true);
Simulator::Run();
Simulator::Destroy();
return 0;
}




